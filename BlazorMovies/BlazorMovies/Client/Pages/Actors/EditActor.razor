@page "/actors/edit/{ActorId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Edit Actor</h3>
 
@if (Actor is null)
{
    <p>loading...</p>
}
else
{
    <FormActor Actor="Actor" OnValidSubmit="Edit"></FormActor>
}

@code {
    [Parameter] public int ActorId { get; set; }
    // Actor Actor = new Actor();
    Actor? Actor;
    private FormActor? formActor;

    // protected override void OnInitialized()
    // {
    //     Actor = new Actor
    //         {
    //             Id = ActorId,
    //             Name = "Dani",
    //             DateBirth = DateTime.Today
    //         };
    // } 
    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Actor>($"api/actors/{ActorId}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("actors");
            }
            else
            {
                var errorMessage = await responseHTTP.GetMessageError();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            Actor = responseHTTP.Response;
        }
    }

    // void Edit()
    // {
    //     Console.WriteLine("Edit actor");
    // }
    private async Task Edit()
    { 
        var responseHTTP = await repository.Put("api/actors", Actor);
        if (responseHTTP.Error)
        {
            var errorMessage = await responseHTTP.GetMessageError();
            await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
        }
        else
        { 
            navigationManager.NavigateTo("actors");
        }
    }
}
