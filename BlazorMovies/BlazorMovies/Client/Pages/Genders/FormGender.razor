@* @inject IJSRuntime js *@
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

@* <EditForm Model="Gender" OnValidSubmit="OnValidSubmit"> *@
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    @* Este componente se encarga de forzar las validaciones *@
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label>Name</label>
        <div>
            <InputText class="form-control" @bind-Value="@Gender.Name"></InputText>
            <ValidationMessage For="@(() => Gender.Name)"></ValidationMessage>
        </div>
    </div>
    <button class="btn btn-success" type="submit">Save</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Gender);
    }

    [EditorRequired]
    [Parameter]
    public Gender Gender { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    public bool FormPostedSuccess { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formEdited = editContext.IsModified();
        if (!formEdited)
        {
            return;
        }
        if (FormPostedSuccess)
        {
            return;
        }

        // var confirm = await js.Confirm("Do you want exit and lose changes?");
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Do you want exit and lose changes?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
        });
        var confirm = !string.IsNullOrEmpty(result.Value);
        Console.WriteLine($"before confirm. {confirm}");
        if (confirm)
        {
            return;
        }
        Console.WriteLine($"after confirm. {confirm}");
        context.PreventNavigation();
    }
}
