@* <EditForm Model="Movie" OnInvalidSubmit="OnValidSubmit"> *@
<EditForm Model="Movie" OnInvalidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label>Title</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Title"></InputText>
            <ValidationMessage For="@(() =>Movie.Title)"></ValidationMessage>
        </div>
    </div>

    <div class="mb-3">
        <label>In Premier</label>
        <div>
            <InputCheckbox @bind-Value="@Movie.InPremier"></InputCheckbox>
            <ValidationMessage For="@(() =>Movie.InPremier)"></ValidationMessage>
        </div>
    </div>

    <div class="mb-3">
        <label>Release Date</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Movie.DateLaunch"></InputDate>
            <ValidationMessage For="@(() =>Movie.DateLaunch)"></ValidationMessage>
        </div>
    </div>

    <div class="mb-3">
        <InputImage Label="Poster" ImageSelected="ImgSelected" ImageURL="imgURL"></InputImage>
    </div>

    <div class="mb-3 form-markdown">
        <InputMarkdown @bind-Value="@Movie.Summary" For="@(() => Movie.Summary)" Label="Summary">
        </InputMarkdown>
    </div>

    <div class="mb-3">
        <label>Genders</label>
        <div>
            <SelectorMultiple NoSelecteds="NoSelecteds" Selecteds="Selecteds"></SelectorMultiple>
        </div>
    </div>

    <div class="mb-3">
        <label>Actors</label>
        <div>
            <SelectorMultipleTypeahead Context="Actor" SearchMethod="SearchActors" ElementsSelected="ActorsSeleted">
                <MyListTemplate>
                    @Actor.Name / <input type="text" placeholder="Character" @bind="Actor.Character" />
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width: 50px;" src="@Actor.Photo" />
                    @Actor.Name
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>

    <button class="btn btn-success">Save</button>
</EditForm>

@code {
    string? imgURL;

    [EditorRequired]
    [Parameter] public Movie Movie { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<Gender> GendersSelecteds { get; set; } = new List<Gender>();

    [Parameter]
    [EditorRequired]
    public List<Gender> GendersNoSelecteds { get; set; } = new List<Gender>();

    [Parameter]
    public List<Actor> ActorsSeleted { get; set; } = new List<Actor>();

    private List<SelectorMultipleModel> Selecteds { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSelecteds { get; set; } = new List<SelectorMultipleModel>();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imgURL = Movie.Poster;
            Movie.Poster = null;
        }

        Selecteds = GendersSelecteds.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
        NoSelecteds = GendersNoSelecteds.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
    }

    private void ImgSelected(string imgBase64)
    {
        Movie.Poster = imgBase64;
        imgURL = null;
    }

    private async Task<IEnumerable<Actor>> SearchActors(string searchText)
    {
        return new List<Actor>(){
        new Actor{Id = 1, Name = "Arnold Schwarzenegger", Photo = "https://www.schwarzenegger.com/assets/images/img-3.jpg"},
        new Actor{Id = 2, Name = "Amitabh Bachchan", Photo = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/BACHCHAN_Amitabh_03-24x30-2009b.jpg/220px-BACHCHAN_Amitabh_03-24x30-2009b.jpg"},
        new Actor{Id = 3, Name = "Tom Hanks", Photo = "https://imagenes.elpais.com/resizer/Zpcdgu5_1dZVGR9i1LKACPG_hRg=/1960x1470/filters:focal(1773x1456:1783x1466)/cloudfront-eu-central-1.images.arcpublishing.com/prisa/AKSN7LR4ONDX7GB2YW2HWNVNCU.jpg" }
        };
    }

    private async Task OnDataAnnotationsValidated()
    {
        Movie.GendersMovie = Selecteds.Select(x => new GenderMovie { GenderId = int.Parse(x.Key) }).ToList();
        Movie.MoviesActor = ActorsSeleted.Select(x => new MovieActor { ActorId = x.Id, Character = x.Character }).ToList();

        await OnValidSubmit.InvokeAsync();
    }
}
