@* ﻿@inject IRepository repository *@
@inject IRepository repository

<EditForm Model="Movie" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Title</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Title" />
            <ValidationMessage For="@(() => Movie.Title)" />
        </div>
    </div>

    <div class="mb-3">
        <label>In Premier</label>
        <div>
            <InputCheckbox @bind-Value="@Movie.InPremier" />
            <ValidationMessage For="@(() => Movie.InPremier)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Trailer" />
            <ValidationMessage For="@(() => Movie.Trailer)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Date Launch</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Movie.DateLaunch" />
            <ValidationMessage For="@(() => Movie.DateLaunch)" />
        </div>
    </div>

    <div class="mb-3">
        <InputImage Label="Poster" ImageSelected="ImagenSeleccionada" ImageURL="@imagenURL" />
    </div>

    <div class="mb-3 form-markdown">
        <InputMarkdown @bind-Value="@Movie.Summary"
                       For=@(() => Movie.Summary)
                       Label="Resumen" />
    </div>

    <div class="mb-3">
        <label>Genders</label>
        <div>
            <SelectorMultiple NoSelecteds="NoSeleccionados" Selecteds="Seleccionados">

            </SelectorMultiple>
        </div>
    </div>

    <div class="mb-3">
        <label>Actors</label>
        <div>
            <SelectorMultipleTypeahead Context="Actor" SearchMethod="BuscarActores"
                                       ElementsSelected="ActoresSeleccionados">
                <MyListTemplate>
                    @Actor.Name / <input type="text" placeholder="Personaje" @bind="Actor.Character" />
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width: 50px" src="@Actor.Photo" />
                    @Actor.Name
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>

    <button class="btn btn-success">Guardar Cambios</button>

</EditForm>


@code {
    string? imagenURL;

    [Parameter]
    [EditorRequired]
    public Movie Movie { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<Gender> GendersSelected { get; set; } = new List<Gender>();

    [Parameter]
    [EditorRequired]
    public List<Gender> GendersNoSelecteds { get; set; } = new List<Gender>();

    [Parameter]
    public List<Actor> ActoresSeleccionados { get; set; } = new List<Actor>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imagenURL = Movie.Poster;
            Movie.Poster = null;
        }

        Seleccionados =
            GendersSelected.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();

        NoSeleccionados =
            GendersNoSelecteds.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
    }

    private void ImagenSeleccionada(string imagenBase64)
    {
        Movie.Poster = imagenBase64;
        imagenURL = null;
    }

    private async Task<IEnumerable<Actor>> BuscarActores(string searchText)
    {
        // return null;

        // return new List<Actor>()
        // {
        //     new Actor{Id = 1, Name ="Tom Hanks", Photo = "https:upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Tom_Hanks_TIFF_2019.jpg/431px-Tom_Hanks_TIFF_2019.jpg"},
        //     new Actor{Id = 2, Name ="Arnold Schwarzenegger", Photo = "https:upload.wikimedia.org/wikipedia/commons/thumb/a/af/Arnold_Schwarzenegger_by_Gage_Skidmore_4.jpg/471px-Arnold_Schwarzenegger_by_Gage_Skidmore_4.jpg"}
        // };
    
        var respuestaHTTP = await repository.Get<List<Actor>>($"api/actors/search/{searchText}");
        return respuestaHTTP!.Response!;       
    }

    private async Task OnDataAnnotationsValidated()
    {
        Movie.GendersMovie = Seleccionados
            .Select(x => new GenderMovie { GenderId = int.Parse(x.Key) }).ToList();

        Movie.MoviesActor = ActoresSeleccionados
            .Select(x => new MovieActor { ActorId = x.Id, Character = x.Character }).ToList();

        await OnValidSubmit.InvokeAsync();
    }
}