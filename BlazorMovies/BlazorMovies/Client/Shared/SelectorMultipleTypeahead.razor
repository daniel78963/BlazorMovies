@using Blazored.Typeahead
@typeparam T

<BlazoredTypeahead TValue="T" TItem="T" SearchMethod="SearchMethod" Value="sampleItem" ValueChanged="ElementSelected"
                   ValueExpression="@(() => sampleItem)">
    <ResultTemplate>
        @* //RenderFragment *@
        @MyResultTemplate(context) @* //Con el context le podemos pasar los elementos del SearchMethod que recibamos *@
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, no records found!
    </NotFoundTemplate>
    <SelectedTemplate></SelectedTemplate> @* //Es un requerimiento de Typeahead *@
</BlazoredTypeahead>

<ul class="list-group">
    @foreach (var item in ElementsSelected)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="@(() => ElementsSelected.Remove(item))"
                  class="badge bg-primary rounded-pill" style="cursor:pointer">
                  X</span>
        </li>
    }
</ul>

@code {
    [Parameter, EditorRequired] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; } = null!;
    [Parameter] public List<T> ElementsSelected { get; set; } = new List<T>();
    [Parameter, EditorRequired] public RenderFragment<T> MyResultTemplate { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment<T> MyListTemplate { get; set; } = null!;
    T? sampleItem = default(T);
    T? itemDragged;

    private void HandleDragStart(T item)
    {
        itemDragged = item;
    }

    private void HandleDragOver(T item)
    {
        if (itemDragged is null)
        {
            return;
        }

        if (!item.Equals(itemDragged))
        {
            //Vamos a intercambiar los indices para intercambiarlos de orden
            var indexElementDragged = ElementsSelected.IndexOf(itemDragged);
            var indexElement = ElementsSelected.IndexOf(item);
            ElementsSelected[indexElement] = itemDragged;
            ElementsSelected[indexElementDragged] = item;
        }
    }

    private void ElementSelected(T item)
    {
        if (!ElementsSelected.Any(x => x.Equals(item)))
        {
            ElementsSelected.Add(item);
        }
        sampleItem = default(T); //esto es para que cuando se seleccione, se limpie el textbox
    }
}
