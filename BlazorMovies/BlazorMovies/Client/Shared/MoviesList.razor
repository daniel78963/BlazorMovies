@inject IJSRuntime js

@* <h4>Example Foreach</h4> *@

@*  <input type="checkbox" @onchange="@(() => ShowButtons = !ShowButtons)" /> *@
@* <input type="checkbox" @bind="ShowButtons" />
<span>Show Buttons</span> *@


<div style="display: flex; flex-wrap: wrap; align-items: center;">
    <ListadoGenerico List="Movies">
        <HaveRecord>
            <MovieIndividual Movie="context" DeleteMovieEvent="DeleteMovieEvent" ShowButtons="ShowButtons"></MovieIndividual>
        </HaveRecord>
        @*  <HaveRecord contextmenu="movie">
        <MovieIndividual Movie="movie" DeleteMovieEvent="DeleteMovieEvent" ShowButtons="ShowButtons"></MovieIndividual>
        </HaveRecord> *@
    </ListadoGenerico>
</div>


@* 
<h4>Example For</h4>
@for (int i = 0; i < Movies.Count; i++)
{
    <div>
        <p>@(i + 1)) Title: <b>@Movies[i].Title</b></p>
        <p>Date launch: <b> @Movies[i].DateLaunch.ToString("yyyy MMM dd") </b></p>
    </div>
}

 *@
@code {
    [Parameter]
    public List<Movie>? Movies { get; set; }

    bool ShowButtons = false;

    // public List<Movie> GetMovies()
    // {
    //     return new List<Movie>()
    //     {
    //         new Movie() { Title = "Black, Amor y Compasión", DateLaunch = new DateTime(2023, 11, 11) },
    //         new Movie() { Title = "Winter", DateLaunch = new DateTime(2024, 05, 19) },
    //         new Movie() { Title = "Panter", DateLaunch = new DateTime(2024, 1, 21) }
    //     };
    // }

    // protected override async Task OnInitializedAsync()
    // {
    //     await Task.Delay(3000);
    //     Movies = GetMovies();
    // }

    private async Task DeleteMovieEvent(Movie movie)
    {
        // var confirm = await js.InvokeAsync<bool>("confirm", $"do you want delete the movie {movie.Title}?");
        var confirm = await js.Confirm($"do you want delete the movie {movie.Title}?");
        if (confirm)
        {
            Console.WriteLine("deleting a movie...");
            Movies!.Remove(movie);
        }
    }

    // [Parameter]
    // public RenderFragment ChildContent { get; set; } = null!;
    // [Parameter]
    // public RenderFragment Loading { get; set; } = null!;
    // [Parameter]
    // public RenderFragment NoRecords { get; set; } = null!;

    protected override void OnInitialized()
    {
        ///Primera vez
        Console.WriteLine($"OnInitialized - Quantity movies: {Movies!.Count}");
    }

    protected override void OnParametersSet()
    {
        ///Si tengo parametros
        Console.WriteLine($"OnParametersSet - Quantity movies: {Movies!.Count}");
    }

    protected override void OnAfterRender(bool firtsRendering)
    {
        ///Despues del cargado
        Console.WriteLine("OnAfterRender: primera vez: " + firtsRendering);
    }

    protected override bool ShouldRender()
    {
        ///Si debe volver a actualizar la parte visual. Puedo controlar si quiero o no que se actualice el ccomponente visual: return false
        Console.WriteLine("ShouldRender");
        return true;
    }

    public void CleanMovies()
    {
        if (Movies is not null)
        {
            Movies.Clear();
        }
    }
}
